/*
 * Lucene Query Grammar for PEG.js
 * ========================================
 *
 * This grammar supports many of the constructs contained in the Lucene Query Syntax.
 *
 * Supported features:
 * - conjunction operators (AND, OR, ||, &&, NOT, AND NOT, OR NOT)
 * - prefix operators (+, -)
 * - quoted values ("foo bar")
 * - named fields (foo:bar)
 * - range expressions (foo:[bar TO baz], foo:{bar TO baz})
 * - regex expressions (/^f?o[1-5]o/)
 * - proximity search expressions ("foo bar"~5)
 * - boost expressions (foo^5, "foo bar"^5)
 * - fuzzy search expressions (foo~, foo~0.5)
 * - parentheses grouping ( (foo OR bar) AND baz )
 * - field groups ( foo:(bar OR baz) )
 *
 * The grammar will create a parser which returns an AST for the query in the form of a tree
 * of nodes, which are dictionaries. There are three basic types of expression dictionaries:
 *
 * A node expression generally has the following structure:
 *
 * {
 *   'type: : 'node',
 *   'left' : dictionary,     // field expression or node
 *   'operator': string,      // operator value
 *   'right': dictionary,     // field expression OR node
 *   'field': string          // field name (for field group syntax) [OPTIONAL]
 *   'parenthesized': boolean // whether or not the expression was placed in parentheses
 * }
 *
 *
 * A field expression has the following structure:
 *
 * {
 *   'type': 'term',
 *   'field': string,         // field name
 *   'term': string,          // term value
 *   'quoted': boolean,       // whether or not the value was quoted in the input string
 *   'regex': boolean,        // whether or not the value is a regex expression
 *   'prefix': string         // prefix operator (+/-)
 *   'boost': float           // boost value, (value > 1 must be integer)
 *   'similarity': float      // similarity value, (value must be > 0 and < 1)
 *   'proximity': integer     // proximity value
 * }
 *
 *
 * A range expression has the following structure:
 *
 * {
 *   'type': 'range',
 *   'field': string,         // field name
 *   'termMin': string,       // minimum value (left side) of range
 *   'termMax': string,       // maximum value (right side) of range
 *   'minInclusive': boolean, // if min value is inclusive '['
 *   'maxInclusive': boolean, // if max value is inclusive ']'
 * }
 *
 * Other Notes:
 *
 * - For any field name, unnamed/default fields will have the value "<implicit>".
 * - Wildcards (fo*, f?o) and fuzzy search modifiers (foo~.8) will be part of the term value.
 * - Escaping is not supported and generally speaking, will break the parser.
 * - Conjunction operators that appear at the beginning of the query violate the logic of the
 *   syntax, and are currently "mostly" ignored. The last element will be returned.
 *
 *   For example:
 *       Query: OR
 *       Return: { "operator": "OR" }
 *
 *       Query: OR AND
 *       Return: { "operator": "AND" }
 *
 *       Query: OR AND foo
 *       Return: { "left": { "field": "<implicit>", "term": "foo" } }
 *
 *  To test the grammar, use the online parser generator at http://pegjs.majda.cz/online
 *
 */

 {
   var implicit = '<implicit>';
   var wildcard = '*';
   var negativeOps = ['NOT', '!'];

   var leftAssociative = (originalLeft, operator, rest) =>
     rest.reduce((left, right) => ({ left, operator, right }), originalLeft);
 }

Start
  = _* node:ClauseOr
    {
      //return node;
      if (!node.operator) {
        return {
          left: node,
          type: 'node',
        }
      }

      return { ...node, type: 'node' };
    }
  / _*
    {
      return {};
    }
  / EOF
    {
      return {};
    }

LogicalAnd
  = 'AND'
  / '&&'

LogicalOr
  = 'OR'
  / '||'

LogicalNot
  = 'NOT'
  / '!'

ClauseOr
  = _* left:ClauseAnd _* operator:LogicalOr _* rest:ClauseOr*
  {
    return leftAssociative(left, operator || implicit, rest);
  }
  / _* left:ClauseAnd _* rest:ClauseOr*
  {
    return leftAssociative(left, implicit, rest);
  }
  / ClauseAnd

ClauseAnd
  = _* left:ClauseNot _* operator:LogicalAnd _+ right:ClauseAnd _*
  {
    return { left, operator, right, type: 'node'}
  }
  / ClauseNot

ClauseNot
  = _* operator:LogicalNot _+ left:PrimaryClause _*
  {
    return { left, operator, right: null, type: 'node'};
  }
  / PrimaryClause


PrimaryClause
  = _* '(' _* left:ClauseOr _* ')'
  {
    if (left && left.left) {
      return {...left, type: 'node', parenthesized: true };
    }

    return { left, type: 'node', parenthesized: true };
    }
  / left:FieldExpr
  {
    return left;
  }


Node
  = operator:OperatorExpr EOF
  {
    return { operator };
  }
  / operator:OperatorExpr? _* left:ClauseOr _* EOF
  {
    return { ...left, type: 'node' };
  }
  // start:OperatorExpr? left:GroupExpr positiveOp:PositiveOperatorExpr? negativeOp:NegativeOperatorExpr? right:Node*
  // {
  //   let node = { left, type: 'node' };
  //   let rightNode = null;

  //   if (negativeOps.includes(start)) {
  //     node.left = {
  //       operator: start,
  //       left
  //     }
  //   } else {
  //     node.start = start;
  //   }

  //   if (right.length > 0) {
  //     if (right[0].right) {
  //       rightNode = right[0];
  //     } else {
  //       rightNode = right[0].left;
  //     }

  //     if (positiveOp && negativeOp) {
  //       // AND NOT or OR NOT
  //       // In this situation we have a nested group
  //       // node.right = { operator: negativeOp, left: rightNode}
  //       node.right = {
  //         operator: negativeOp,
  //         left: rightNode
  //       };
  //     } else {
  //       node.right = rightNode;
  //     }

  //     node.operator = positiveOp || negativeOp || implicit;
  //   }

  //   return node;
  // }
  // operator:OperatorExpr right:Node
  // {
  //   return right;
  // }

GroupExpr
  = fieldExp:FieldExpr _*
    {
      return fieldExp;
    }
  / ParenExpr

ParenExpr
  = "(" _* node:Node* ")" _*
    {
      // I need to better understand this area
      node[0].parenthesized = true;
      node[0].type = 'node';
      return node[0];
    }

FieldExpr
  = prefix:PrefixOperatorExpr? fieldname:FieldName range:SingleRangeOperatorExpr
    {
      range.field = fieldname.name;
      range.fieldLocation = fieldname.location;

      range.prefix = prefix;

      return range;
    }
  / prefix:PrefixOperatorExpr? fieldname:FieldName? range:RangeOperatorExpr
    {
      range.field = fieldname == null || fieldname.name == '' ? implicit : fieldname.name;
      range.fieldLocation = fieldname == null || fieldname.name == '' ? null : fieldname.location;

      range.prefix = prefix;

      return range;
    }
  / prefix:PrefixOperatorExpr? fieldname:FieldName node:PrimaryClause
    {
        node.field = fieldname.name;
        node.fieldLocation = fieldname.location;

        node.prefix = prefix;

        return node;
    }
  / prefix:PrefixOperatorExpr? fieldname:FieldName? term:Term
    {
      let fieldexp = {
        field: fieldname == null || fieldname.name == '' ? implicit : fieldname.name,
        fieldLocation: fieldname == null || fieldname.name == '' ? null : fieldname.location,
      };

      for (let key in term) {
        fieldexp[key] = term[key];
      }

      fieldexp.prefix = prefix;

      return fieldexp;
    }

FieldName
  = fieldname:UnquotedTerm [:] _*
    {
      return {
        name: fieldname.value,
        location: fieldname.location
      };
    }

Term
  = term:QuotedTerm proximity:ProximityModifier? boost:BoostModifier? _*
    {
      let result = {
        term,
        proximity,
        quoted: true,
        regex : false,
        type: 'term',
        termLocation: location()
      };

      result.boost = boost;

      return result;
    }
  / prefix:PrefixOperatorExpr? term:RegexTerm _*
    {
      let result = {
        term: term,
        quoted: false,
        regex: true,
        type: 'term',
        termLocation: location()
      };

      result.prefix = prefix;

      return result;
    }
  / prefix:PrefixOperatorExpr? term:UnquotedTerm similarity:FuzzyModifier? boost:BoostModifier? _*
    {
      return {
        similarity,
        boost,
        prefix,
        term: term.value,
        quoted: false,
        regex: false,
        type: 'term',
        termLocation: location()
      };
    }

RangedTermChar
  = "\\" sequence:EscapeSequence { return '\\' + sequence; }
  / '.' / [^ \t\r\n\f\{\}()/^~\[\]]


RangedTerm
  = term:RangedTermChar+
    {
      return {
        value: term.join(''),
        location: location()
      };
    }

UnquotedTerm
  = term:TermChar+
    {
      return {
        value: term.join(''),
        location: location(),
      };
    }

TermChar
  = "\\" sequence:EscapeSequence { return '\\' + sequence; }
  / '.' / [^: \t\r\n\f\{\}()"/^~\[\]]


QuotedTerm
  = '"' chars:DoubleStringCharacter* '"' { return chars.join(''); }

RegexTerm
  = '/' chars:RegexCharacter+ '/' { return chars.join('') }

DoubleStringCharacter
  = !('"' / "\\") char:. { return char; }
  / "\\" sequence:EscapeSequence { return '\\' + sequence; }

RegexCharacter
  = !('/' / "\\") char:. { return char; }
  / "\\" sequence:EscapeSequence { return '\\' + sequence; }

ProximityModifier
  = '~' proximity:IntExpr
    {
      return proximity;
    }

BoostModifier
  = '^' boost:NumericExpr
    {
      return boost;
    }

FuzzyModifier
  = '~' fuzziness:DecimalExpr?
    {
      return fuzziness == '' || fuzziness == null ? 0.5 : fuzziness;
    }

NumericExpr
 = DecimalExpr
 / IntExpr

DecimalExpr
  = '0.' val:[0-9]+
    {
      return parseFloat("0." + val.join(''));
    }

IntExpr
  = val:[0-9]+
    {
      return parseInt(val.join(''));
    }


RangeOpenOperator
  = '['
  / '{'

RangeCloseOperator
  = ']'
  / '}'

RangeOperatorExpr
  = rangeOpen:RangeOpenOperator _* termMin:RangedTerm _* 'TO' _+ termMax:RangedTerm _* rangeClose:RangeCloseOperator
    {
      return {
        type: 'range',
        termMin: termMin.value,
        termMinLocation: termMin.location,
        termMax: termMax.value,
        termMaxLocation: termMax.location,
        minInclusive: rangeOpen === '[',
        maxInclusive: rangeClose === ']'
      };
    }

SingleRangeOperatorExpr
  = _* op:SingleRangeOperator term:RangedTerm
    {
      if (op.startsWith('>')) {
        return {
          type: 'range',
          termMin: term.value,
          termMinLocation: term.location,
          minInclusive: op.length > 1,
          termMax: wildcard,
          maxInclusive: true
        };
      } else {
        return {
          type: 'range',
          termMin: wildcard,
          minInclusive: true,
          termMax: term.value,
          termMaxLocation: term.location,
          maxInclusive: op.length > 1,
        };
      }
    }

SingleRangeOperator
  = '>='
  / '<='
  / '>'
  / '<'

SingleExpr
  = _* operator:Operator _+
    {
      return operator;
    }
  / _* operator:Operator EOF
    {
      return operator;
    }

OperatorExpr
  = _* operator:Operator _+
    {
      return operator;
    }
  / _* operator:Operator EOF
    {
      return operator;
    }

PositiveOperatorExpr
  = _* operator:PositiveOperator _+
    {
      return operator;
    }
  / _* operator:PositiveOperator EOF
    {
      return operator;
    }

NegativeOperatorExpr
  = _* operator:NegativeOperator _+
    {
      return operator;
    }
  / _* operator:NegativeOperator EOF
    {
      return operator;
    }


PositiveOperator
  = 'OR'
  / 'AND'
  / '||'
  / '&&'

NegativeOperator
  = 'NOT'
  / '!'

Operator
  = PositiveOperator
  / NegativeOperator

PrefixOperatorExpr
  = _* operator:PrefixOperator
    {
      return operator;
    }

PrefixOperator
  = '+'
  / '-'
  / '!'

_ "whitespace"
  = [ \t\r\n\f]+

EOF
  = !.

EscapeSequence
  = "+"
  / "-"
  / "!"
  / "("
  / ")"
  / "{"
  / "}"
  / "["
  / "]"
  / "^"
  / "\""
  / "?"
  / ":"
  / "\\"
  / "&"
  / "|"
  / "'"
  / "/"
  / "~"
  / "*"
  / " "
