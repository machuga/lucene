/*
 * Lucene Query Grammar for PEG.js
 * ========================================
 *
 * This grammar supports many of the constructs contained in the Lucene Query Syntax.
 *
 * Supported features:
 * - conjunction operators (AND, OR, ||, &&, NOT, AND NOT, OR NOT)
 * - prefix operators (+, -)
 * - quoted values ("foo bar")
 * - named fields (foo:bar)
 * - range expressions (foo:[bar TO baz], foo:{bar TO baz})
 * - regex expressions (/^f?o[1-5]o/)
 * - proximity search expressions ("foo bar"~5)
 * - boost expressions (foo^5, "foo bar"^5)
 * - fuzzy search expressions (foo~, foo~0.5)
 * - parentheses grouping ( (foo OR bar) AND baz )
 * - field groups ( foo:(bar OR baz) )
 *
 * The grammar will create a parser which returns an AST for the query in the form of a tree
 * of nodes, which are dictionaries. There are three basic types of expression dictionaries:
 *
 * A node expression generally has the following structure:
 *
 * {
 *     'left' : dictionary,     // field expression or node
 *     'operator': string,      // operator value
 *     'right': dictionary,     // field expression OR node
 *     'field': string          // field name (for field group syntax) [OPTIONAL]
 *     'parenthesized': boolean // whether or not the expression was placed in parentheses
 *                              // in the input
 * }
 *
 *
 * A field expression has the following structure:
 *
 * {
 *     'field': string,         // field name
 *     'term': string,          // term value
 *     'quoted': boolean,       // whether or not the value was quoted in the input string
 *     'regex': boolean,        // whether or not the value is a regex expression
 *     'prefix': string         // prefix operator (+/-) [OPTIONAL]
 *     'boost': float           // boost value, (value > 1 must be integer) [OPTIONAL]
 *     'similarity': float      // similarity value, (value must be > 0 and < 1) [OPTIONAL]
 *     'proximity': integer     // proximity value [OPTIONAL]
 * }
 *
 *
 * A range expression has the following structure:
 *
 * {
 *     'field': string,         // field name
 *     'term_min': string,      // minimum value (left side) of range
 *     'term_max': string,      // maximum value (right side) of range
 *     'inclusive': string     // inclusive ([...]) or exclusive ({...}) or mixed ({...],[...})
 * }
 *
 * Other Notes:
 *
 * - For any field name, unnamed/default fields will have the value "<implicit>".
 * - Wildcards (fo*, f?o) and fuzzy search modifiers (foo~.8) will be part of the term value.
 * - Escaping is not supported and generally speaking, will break the parser.
 * - Conjunction operators that appear at the beginning of the query violate the logic of the
 *   syntax, and are currently "mostly" ignored. The last element will be returned.
 *
 *   For example:
 *       Query: OR
 *       Return: { "operator": "OR" }
 *
 *       Query: OR AND
 *       Return: { "operator": "AND" }
 *
 *       Query: OR AND foo
 *       Return: { "left": { "field": "<implicit>", "term": "foo" } }
 *
 *  To test the grammar, use the online parser generator at http://pegjs.majda.cz/online
 *
 */

Start
  = _* node:Node+
    {
        return node[0];
    }
  / _*
    {
        return {};
    }
  / EOF
    {
        return {};
    }

Node
  = operator:OperatorExpr EOF
    {
        return {
            'operator': operator,
        };
    }
  / start:OperatorExpr left:GroupExpr operator:OperatorExpr* right:Node*
    {
        var node = {
            'start': start,
            'left': left,
        };

        var right =
                right.length == 0
                ? null
                : right[0]['right'] == null
                    ? right[0]['left']
                    : right[0];

        if (right != null) {
            node['operator'] = operator == '' ? '<implicit>' : operator[0];
            node['right'] = right;
        }

        return node;
    }
  / operator:OperatorExpr right:Node
    {
        return right;
    }
  / left:GroupExpr operator:OperatorExpr* right:Node*
    {
        var node = {
            'left':left
        };

        var right =
                right.length == 0
                ? null
                : right[0]['right'] == null
                    ? right[0]['left']
                    : right[0];

        if (right != null) {
            node['operator'] = operator == '' ? '<implicit>' : operator[0];
            node['right'] = right;
        }

        return node;
    }

GroupExpr
  = field_exp:FieldExpr _*
    {
        return field_exp;
    }
  / ParenExpr

ParenExpr
  = "(" _* node:Node+ ")" _*
    {
        node[0]['parenthesized'] = true;
        return node[0];
    }

FieldExpr
  = op:PrefixOperatorExpr? fieldname:FieldName range:SingleRangeOperatorExpr
    {
        range['field'] = fieldname.label;
        range['fieldLocation'] = fieldname.location;

        if('' != op)
        {
          range['prefix'] = op;
        }

        return range;
    }
  / op:PrefixOperatorExpr? fieldname:FieldName? range:RangeOperatorExpr
    {
        range['field'] =
            fieldname == null || fieldname.label == ''
                ? "<implicit>"
                : fieldname.label;
        range['fieldLocation'] =
        fieldname == null || fieldname.label == ''
            ? null
            : fieldname.location;

        if('' != op)
        {
          range['prefix'] = op;
        }
        return range;
    }
  / op:PrefixOperatorExpr? fieldname:FieldName node:ParenExpr
    {
        node['field']= fieldname.label;
        node['fieldLocation'] = fieldname.location;

        if('' != op)
        {
          node['prefix'] = op;
        }

        return node;
    }
  / op:PrefixOperatorExpr? fieldname:FieldName? term:Term
    {
        var fieldexp = {
            'field':
                fieldname == null || fieldname.label == ''
                    ? "<implicit>"
                    : fieldname.label,
            'fieldLocation':
                fieldname == null || fieldname.label == ''
                    ? null
                    : fieldname.location,


            };

        for(var key in term)
            fieldexp[key] = term[key];

        if('' != op)
        {
          fieldexp['prefix'] = op;
        }

        return fieldexp;
    }

FieldName
  = fieldname:UnquotedTerm [:] _*
    {
        return {
          label: fieldname.label,
          location: fieldname.location
        }

    }

Term
  = term:QuotedTerm proximity:ProximityModifier? boost:BoostModifier? _*
      {
        var result = {
          'term': term,
          'quoted': true,
          'regex' : false,
          'termLocation': location()
        };

        if('' != proximity)
        {
            result['proximity'] = proximity;
        }
        if('' != boost)
        {
            result['boost'] = boost;
        }

        return result;
    }
  / op:PrefixOperatorExpr? term:RegexTerm _*
      {
        var result = {
          'term': term,
          'quoted': false,
          'regex': true,
          'termLocation': location()
        };

        return result;
    }
  / op:PrefixOperatorExpr? term:UnquotedTerm similarity:FuzzyModifier? boost:BoostModifier? _*
    {
        var result = {
          'term': term.label,
          'quoted': false,
          'regex': false,
          'termLocation': location()
        };
        if('' != similarity)
        {
            result['similarity'] = similarity;
        }
        if('' != boost)
        {
            result['boost'] = boost;
        }
        if('' != op)
        {
            result['prefix'] = op;
        }
        return result;
    }

RangedTermChar
  = "\\" sequence:EscapeSequence { return '\\' + sequence; }
  / '.' / [^ \t\r\n\f\{\}()/^~\[\]]


RangedTerm
  = term:RangedTermChar+
    {
        return term.join('');
    }

UnquotedTerm
  = term:TermChar+
    {
        return {
          label: term.join(''),
          location: location(),
        };
    }

TermChar
  = "\\" sequence:EscapeSequence { return '\\' + sequence; }
  / '.' / [^: \t\r\n\f\{\}()"/^~\[\]]


QuotedTerm
  = '"' chars:DoubleStringCharacter* '"' { return chars.join(''); }

RegexTerm
  = '/' chars:RegexCharacter+ '/' { return chars.join('') }

DoubleStringCharacter
  = !('"' / "\\") char:. { return char; }
  / "\\" sequence:EscapeSequence { return '\\' + sequence; }

RegexCharacter
  = !('/' / "\\") char:. { return char; }
  / "\\" sequence:EscapeSequence { return '\\' + sequence; }

ProximityModifier
  = '~' proximity:IntExpr
    {
        return proximity;
    }

BoostModifier
  = '^' boost:NumericExpr
    {
        return boost;
    }

FuzzyModifier
  = '~' fuzziness:DecimalExpr?
    {
        return fuzziness == '' || fuzziness == null ? 0.5 : fuzziness;
    }

NumericExpr
 = DecimalExpr
 / IntExpr

DecimalExpr
 = '0.' val:[0-9]+
    {
        return parseFloat("0." + val.join(''));
    }

IntExpr
  = val:[0-9]+
    {
        return parseInt(val.join(''));
    }

RangeOperatorExpr
  = '[' term_min:RangedTerm _* 'TO' _+ term_max:RangedTerm ']'
    {
        return {
            'term_min': term_min,
            'term_max': term_max,
            'inclusive': 'both'
        };
    }
  / '{' term_min:RangedTerm _* 'TO' _+ term_max:RangedTerm '}'
    {
        return {
            'term_min': term_min,
            'term_max': term_max,
            'inclusive': 'none'
        };
    }
  / '[' term_min:RangedTerm _* 'TO' _+ term_max:RangedTerm '}'
    {
        return {
            'term_min': term_min,
            'term_max': term_max,
            'inclusive': 'left'
        };
    }
  / '{' term_min:RangedTerm _* 'TO' _+ term_max:RangedTerm ']'
    {
        return {
            'term_min': term_min,
            'term_max': term_max,
            'inclusive': 'right'
        };
    }

SingleRangeOperatorExpr
  = _* op:SingleRangeOperator term:RangedTerm
    {
      if (op.startsWith('>')) {
        return {
            'term_min': term,
            'term_max': '<implicit>',
            'inclusive': op.length > 1 ? 'left' : 'none'
        };
      } else {
        return {
            'term_min': '<implicit>',
            'term_max': term,
            'inclusive': op.length > 1 ? 'right' : 'none'
        };
      }
    }

SingleRangeOperator
  = '>='
  / '<='
  / '>'
  / '<'

SingleExpr
  = _* operator:Operator _+
    {
        return operator;
    }
  / _* operator:Operator EOF
    {
        return operator;
    }

OperatorExpr
  = _* operator:Operator _+
    {
        return operator;
    }
  / _* operator:Operator EOF
    {
        return operator;
    }

Operator
  = 'OR NOT'
  / 'AND NOT'
  / 'OR'
  / 'AND'
  / 'NOT'
  / '||'
  / '&&'

PrefixOperatorExpr
  = _* operator:PrefixOperator
    {
        return operator;
    }

PrefixOperator
  = '+'
  / '-'
  / '!'

_ "whitespace"
  = [ \t\r\n\f]+

EOF
  = !.

EscapeSequence
  = "+"
  / "-"
  / "!"
  / "("
  / ")"
  / "{"
  / "}"
  / "["
  / "]"
  / "^"
  / "\""
  / "?"
  / ":"
  / "\\"
  / "&"
  / "|"
  / "'"
  / "/"
  / "~"
  / "*"
  / " "


